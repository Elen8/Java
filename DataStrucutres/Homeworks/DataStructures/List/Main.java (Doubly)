//Doubly linked list
public class Main
{
    public static class List<E>
    {
        public class Node<E>
        {
            private Node<E> next = null;
            private Node<E> prev = null;
            E element;
            public Node(Node<E> n, Node<E> p, E elem)
            {
                element = elem;
                next = n;
                prev = p;
            }

            public Node<E> getNext() { return next; }
            public Node<E> getPrev() { return prev; }
            public E getElement() { return element; }
            public void setElement(E elem) { element = elem; }
            public void setNext(Node<E> newNext) { next = newNext; }
            public void setPrev(Node<E> newPrev) { prev = newPrev; }
        }

        private Node<E> head = null;
        private Node<E> tail = null;

        int size = 0;
        public List()
        {
            head = new Node<>(null, null, null);
            tail = new Node<>(null, head, null);
            head.setNext(tail);
        }

        public boolean isEmpty()
        {
            return size == 0;
        }
        public void addNode(Node<E> prev, Node<E> next, E elem)
        {
            Node<E> newNode = new Node<>(prev, next, elem);
            next.setPrev(newNode);
            prev.setNext(newNode);
            size++;
        }

        public void removeNode(Node<E> rmNode)
        {
            Node<E> prev = rmNode.getPrev();
            Node<E> next = rmNode.getNext();
            prev.setNext(next);
            next.setPrev(prev);
            size--;
        }

        public void addFirst(E elem)
        {
            addNode(head, head.getNext(), elem);
        }

        public void addLast(E elem)
        {
            addNode(tail.getPrev(), tail, elem);
        }

        public E first()
        {
            if (isEmpty()) return null;
            else return head.getNext().getElement();
        }

        public E last()
        {
            if (isEmpty()) return null;
            else return tail.getPrev().getElement();
        }
    }

    public static void main(String[] args)
    {
        List<Integer> list = new List<Integer>();
        list.addFirst(3);
        System.out.println(list.first());
    }
}
